import threading
import logging

class ConditionSyncManager:
    def __init__(self, seed, monitor, perf_monitor):
        """
        Initialise le gestionnaire de synchronisation bas√© sur les variables de condition.

        Args:
            seed: Instance de STSSeed contenant les ressources.
            monitor: Moniteur de synchronisation (non utilis√© dans cette version).
            perf_monitor: Moniteur de performance (non utilis√© dans cette version).
        """
        self.seed = seed
        self.monitor = monitor
        self.perf_monitor = perf_monitor

        # 1.1 Variables de condition
        self.stop_conditions = {}  # 1.1.1 Conditions pour les arr√™ts
        self.bus_conditions = {}  # 1.1.2 Conditions pour les bus
        self.transfer_condition = threading.Condition()  # 1.1.3 Condition globale pour les transferts

        # 1.2 √âtats partag√©s √† prot√©ger
        self.bus_at_stop = {}  # 1.2.1 Stocke les bus pr√©sents √† chaque arr√™t
        self.boarding_complete = {}  # 1.2.2 √âtat d'embarquement de chaque bus
        self.alighting_complete = {}  # 1.2.3 √âtat de d√©barquement de chaque bus
        self.transfers_in_progress = {}  # 1.2.4 Suivi des transferts en cours

        # Initialisation des verrous et variables de condition
        self._initialize_conditions()

    def _initialize_conditions(self):
        """
        Initialise les variables de condition et les verrous pour chaque arr√™t et bus.
        """
        logging.info("üîß Initialisation des variables de condition.")

        try:
            # Cr√©ation des variables de condition pour les arr√™ts
            for stop_id in self.seed.stops.keys():
                self.stop_conditions[stop_id] = threading.Condition()

            # Cr√©ation des variables de condition pour les bus
            for bus_id in self.seed.buses.keys():
                self.bus_conditions[bus_id] = threading.Condition()
                self.boarding_complete[bus_id] = False
                self.alighting_complete[bus_id] = False

            logging.info(" Variables de condition initialis√©es.")
        except Exception as e:
            logging.error(f" Erreur lors de l'initialisation des conditions : {e}")
            raise RuntimeError("√âchec de l'initialisation de ConditionSyncManager") from e
        

    def initialize(self) -> bool:
        """
        Initialise les variables de condition et les √©tats partag√©s.

        Returns:
            bool: True si l'initialisation a r√©ussi, False sinon.
        """
        logging.info("Initialisation des variables de condition et des √©tats partag√©s.")
        try:
            # Initialisation des conditions pour les arr√™ts
            self.stop_conditions = {}
            for stop_id in self.seed.stops.keys():
                self.stop_conditions[stop_id] = threading.Condition()
                logging.info(f"Condition cr√©√©e pour l'arr√™t {stop_id}.")

            # Initialisation des conditions pour les bus
            self.bus_conditions = {}
            self.boarding_complete = {}
            self.alighting_complete = {}
            for bus_id in self.seed.buses.keys():
                self.bus_conditions[bus_id] = threading.Condition()
                self.boarding_complete[bus_id] = False
                self.alighting_complete[bus_id] = False
                logging.info(f"Condition et √©tats d'embarquement/d√©barquement initialis√©s pour le bus {bus_id}.")

            # Initialisation de la condition globale pour les correspondances
            self.transfer_condition = threading.Condition()
            self.transfers_in_progress = {}
            logging.info("Condition globale pour les correspondances initialis√©e.")

            logging.info("Initialisation des variables de condition termin√©e avec succ√®s.")
            return True

        except Exception as e:
            logging.error(f"Erreur lors de l'initialisation des conditions: {e}")
            return False


    def wait_for_bus(self, passenger_id, stop_id, target_bus_id=None, timeout=30.0) -> int:
        """
        Un passager attend qu'un bus sp√©cifique (ou n'importe quel bus) arrive √† un arr√™t.

        Args:
            passenger_id (int): Identifiant du passager.
            stop_id (int): Identifiant de l'arr√™t.
            target_bus_id (int, optional): Identifiant du bus sp√©cifique attendu (None pour n'importe quel bus).
            timeout (float): D√©lai d'attente maximum en secondes.

        Returns:
            int: L'identifiant du bus arriv√©, ou -1 si timeout.
        """
        if stop_id not in self.stop_conditions:
            logging.warning(f"Arr√™t {stop_id} introuvable.")
            return -1

        condition = self.stop_conditions[stop_id]

        with condition:
            start_time = time.time()
            while time.time() - start_time < timeout:
                # V√©rifier si un bus attendu est √† l'arr√™t
                available_buses = self.bus_at_stop.get(stop_id, [])
                
                if target_bus_id is None:  # N'importe quel bus
                    if available_buses:
                        return available_buses[0]  # Retourne le premier bus disponible
                elif target_bus_id in available_buses:
                    return target_bus_id  # Retourne le bus sp√©cifique si pr√©sent
                
                # Attente sur la condition de l'arr√™t
                condition.wait(timeout=timeout - (time.time() - start_time))

            logging.warning(f"Passager {passenger_id} a attendu trop longtemps √† l'arr√™t {stop_id}.")
            return -1  # Timeout

    def notify_bus_arrival(self, bus_id, stop_id) -> bool:
        """
        Notifie tous les passagers en attente qu'un bus est arriv√© √† un arr√™t.

        Args:
            bus_id (int): Identifiant du bus.
            stop_id (int): Identifiant de l'arr√™t.

        Returns:
            bool: True si la notification a r√©ussi, False sinon.
        """
        if stop_id not in self.stop_conditions:
            logging.warning(f"Arr√™t {stop_id} introuvable.")
            return False

        with self.stop_conditions[stop_id]:
            # Ajouter le bus √† la liste des bus pr√©sents √† l'arr√™t
            if stop_id not in self.bus_at_stop:
                self.bus_at_stop[stop_id] = []
            self.bus_at_stop[stop_id].append(bus_id)

            logging.info(f"Bus {bus_id} a √©t√© notifi√© √† l'arr√™t {stop_id}.")
            self.stop_conditions[stop_id].notify_all()  # R√©veille tous les passagers en attente
            return True

    def notify_bus_departure(self, bus_id, stop_id) -> bool:
        """
        Notifie que le bus quitte l'arr√™t et met √† jour l'√©tat.

        Args:
            bus_id (int): Identifiant du bus.
            stop_id (int): Identifiant de l'arr√™t.

        Returns:
            bool: True si la notification a r√©ussi, False sinon.
        """
        if stop_id not in self.stop_conditions:
            logging.warning(f"Arr√™t {stop_id} introuvable.")
            return False

        with self.stop_conditions[stop_id]:
            if stop_id in self.bus_at_stop and bus_id in self.bus_at_stop[stop_id]:
                self.bus_at_stop[stop_id].remove(bus_id)
                logging.info(f"Bus {bus_id} a quitt√© l'arr√™t {stop_id}.")

            self.stop_conditions[stop_id].notify_all()  # R√©veille tous les passagers en attente
            return True
        


    def start_boarding(self, bus_id, stop_id) -> bool:
        """
        Commence l'op√©ration d'embarquement des passagers dans un bus.

        Args:
            bus_id (int): Identifiant du bus.
            stop_id (int): Identifiant de l'arr√™t.

        Returns:
            bool: True si l'op√©ration a commenc√© avec succ√®s, False sinon.
        """
        if bus_id not in self.bus_conditions or stop_id not in self.stop_conditions:
            logging.warning(f"Bus {bus_id} ou arr√™t {stop_id} introuvable.")
            return False

        with self.bus_conditions[bus_id]:
            self.boarding_complete[bus_id] = False
            logging.info(f"Bus {bus_id} commence l'embarquement √† l'arr√™t {stop_id}.")
            self.bus_conditions[bus_id].notify_all()  # R√©veille les passagers pour qu'ils montent
        return True


    def complete_boarding(self, bus_id) -> bool:
        """
        Marque l'op√©ration d'embarquement comme termin√©e et notifie le bus.

        Args:
            bus_id (int): Identifiant du bus.

        Returns:
            bool: True si la notification a r√©ussi, False sinon.
        """
        if bus_id not in self.bus_conditions:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        with self.bus_conditions[bus_id]:
            self.boarding_complete[bus_id] = True
            logging.info(f"Bus {bus_id} a termin√© l'embarquement.")
            self.bus_conditions[bus_id].notify_all()  # R√©veille le bus qui attend la fin de l'embarquement
        return True
    

    def wait_for_boarding_completion(self, bus_id, timeout=10.0) -> bool:
        """
        Le bus attend que l'embarquement des passagers soit termin√©.

        Args:
            bus_id (int): Identifiant du bus.
            timeout (float): D√©lai d'attente maximum en secondes.

        Returns:
            bool: True si l'embarquement est termin√©, False si timeout.
        """
        if bus_id not in self.bus_conditions:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        with self.bus_conditions[bus_id]:
            start_time = time.time()
            while not self.boarding_complete[bus_id]:
                remaining_time = timeout - (time.time() - start_time)
                if remaining_time <= 0:
                    logging.warning(f"Timeout : Bus {bus_id} n'a pas pu terminer l'embarquement.")
                    return False
                self.bus_conditions[bus_id].wait(timeout=remaining_time)

        logging.info(f"Bus {bus_id} a confirm√© la fin de l'embarquement.")
        return True


    def start_alighting(self, bus_id, stop_id) -> bool:
        """
        Commence l'op√©ration de d√©barquement des passagers d'un bus.

        Args:
            bus_id (int): Identifiant du bus.
            stop_id (int): Identifiant de l'arr√™t.

        Returns:
            bool: True si l'op√©ration a commenc√© avec succ√®s, False sinon.
        """
        if bus_id not in self.bus_conditions or stop_id not in self.stop_conditions:
            logging.warning(f"Bus {bus_id} ou arr√™t {stop_id} introuvable.")
            return False

        with self.bus_conditions[bus_id]:
            self.alighting_complete[bus_id] = False
            logging.info(f"Bus {bus_id} commence le d√©barquement √† l'arr√™t {stop_id}.")
            self.bus_conditions[bus_id].notify_all()  # R√©veille les passagers pour qu'ils descendent
        return True


    def complete_alighting(self, bus_id) -> bool:
        """
        Marque l'op√©ration de d√©barquement comme termin√©e et notifie le bus.

        Args:
            bus_id (int): Identifiant du bus.

        Returns:
            bool: True si la notification a r√©ussi, False sinon.
        """
        if bus_id not in self.bus_conditions:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        with self.bus_conditions[bus_id]:
            self.alighting_complete[bus_id] = True
            logging.info(f"Bus {bus_id} a termin√© le d√©barquement.")
            self.bus_conditions[bus_id].notify_all()  # R√©veille le bus qui attend la fin du d√©barquement
        return True


    def wait_for_alighting_completion(self, bus_id, timeout=10.0) -> bool:
        """
        Le bus attend que le d√©barquement des passagers soit termin√©.

        Args:
            bus_id (int): Identifiant du bus.
            timeout (float): D√©lai d'attente maximum en secondes.

        Returns:
            bool: True si le d√©barquement est termin√©, False si timeout.
        """
        if bus_id not in self.bus_conditions:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        with self.bus_conditions[bus_id]:
            start_time = time.time()
            while not self.alighting_complete[bus_id]:
                remaining_time = timeout - (time.time() - start_time)
                if remaining_time <= 0:
                    logging.warning(f"Timeout : Bus {bus_id} n'a pas pu terminer le d√©barquement.")
                    return False
                self.bus_conditions[bus_id].wait(timeout=remaining_time)

        logging.info(f"Bus {bus_id} a confirm√© la fin du d√©barquement.")
        return True
    

    
    def start_transfer(self, passenger_id, from_bus_id, to_bus_id) -> bool:
        """
        Commence un transfert de passager entre deux bus.

        Args:
            passenger_id (int): Identifiant du passager.
            from_bus_id (int): Bus de d√©part.
            to_bus_id (int): Bus d'arriv√©e.

        Returns:
            bool: True si le transfert a commenc√© avec succ√®s, False sinon.
        """
        if from_bus_id not in self.bus_conditions or to_bus_id not in self.bus_conditions:
            logging.warning(f"Bus {from_bus_id} ou {to_bus_id} introuvable.")
            return False

        with self.transfer_condition:
            self.transfers_in_progress[(passenger_id, from_bus_id, to_bus_id)] = False
            logging.info(f"Passager {passenger_id} commence son transfert de {from_bus_id} √† {to_bus_id}.")
            self.transfer_condition.notify_all()  # Notifie les bus concern√©s qu'un transfert a commenc√©
        return True


    def complete_transfer(self, passenger_id, from_bus_id, to_bus_id) -> bool:
        """
        Termine un transfert de passager et notifie les bus concern√©s.

        Args:
            passenger_id (int): Identifiant du passager.
            from_bus_id (int): Bus de d√©part.
            to_bus_id (int): Bus d'arriv√©e.

        Returns:
            bool: True si le transfert a √©t√© termin√© avec succ√®s, False sinon.
        """
        if (passenger_id, from_bus_id, to_bus_id) not in self.transfers_in_progress:
            logging.warning(f"Transfert inexistant pour passager {passenger_id} entre {from_bus_id} et {to_bus_id}.")
            return False

        with self.transfer_condition:
            self.transfers_in_progress[(passenger_id, from_bus_id, to_bus_id)] = True
            logging.info(f"Passager {passenger_id} a termin√© son transfert de {from_bus_id} √† {to_bus_id}.")
            self.transfer_condition.notify_all()  # Notifie les bus en attente de ce transfert
        return True
    
    def wait_for_transfer_completion(self, bus_id, timeout=15.0) -> bool:
        """
        Un bus attend que tous les transferts le concernant soient termin√©s.

        Args:
            bus_id (int): Identifiant du bus.
            timeout (float): D√©lai d'attente maximum en secondes.

        Returns:
            bool: True si tous les transferts sont termin√©s, False si timeout.
        """
        if bus_id not in self.bus_conditions:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        with self.transfer_condition:
            start_time = time.time()
            while any(not completed for (passenger, from_bus, to_bus), completed in self.transfers_in_progress.items() 
                    if from_bus == bus_id or to_bus == bus_id):
                remaining_time = timeout - (time.time() - start_time)
                if remaining_time <= 0:
                    logging.warning(f"Timeout : Bus {bus_id} n'a pas pu terminer tous les transferts.")
                    return False
                self.transfer_condition.wait(timeout=remaining_time)

        logging.info(f"Bus {bus_id} a confirm√© la fin de tous les transferts.")
        return True

    def run_scenarios(self, duration):
        """
        Ex√©cute les sc√©narios de test.

        Args:
            duration (int): Dur√©e d'ex√©cution des sc√©narios en secondes.
        """
        logging.info("D√©marrage des sc√©narios de test.")

        # Cr√©ation de l'√©v√©nement d'arr√™t
        self.stop_event = threading.Event()

        # Liste des threads
        threads = []

        # 1. Cr√©ation des threads pour les bus
        for bus_id in self.seed.buses.keys():
            thread = threading.Thread(target=self.simulate_bus, args=(bus_id,))
            threads.append(thread)

        # 2. Cr√©ation des threads pour les passagers
        for passenger_id in self.seed.passengers.keys():
            thread = threading.Thread(target=self.simulate_passenger, args=(passenger_id,))
            threads.append(thread)

        # 3. D√©marrage des threads
        for thread in threads:
            thread.start()

        # 4. Attente de la dur√©e de la simulation
        start_time = time.time()
        while time.time() - start_time < duration:
            time.sleep(1)  # Pause pour √©viter de monopoliser le CPU

        # 5. Arr√™t des threads
        self.stop_event.set()

        # 6. Attente que tous les threads terminent leur ex√©cution
        for thread in threads:
            thread.join()

        logging.info(" Simulation termin√©e.")


    def cleanup(self):
        """
        Nettoie les ressources utilis√©es par ConditionSyncManager.

        Returns:
            bool: True si le nettoyage r√©ussit, False sinon.
        """
        try:
            logging.info("üßπ Nettoyage des ressources.")
            self.bus_conditions.clear()
            self.stop_conditions.clear()
            self.transfer_condition = None
            self.bus_at_stop.clear()
            self.boarding_complete.clear()
            self.alighting_complete.clear()
            self.transfers_in_progress.clear()
            logging.info(" Nettoyage termin√©.")
            return True
        except Exception as e:
            logging.error(f" Erreur lors du nettoyage : {e}")
            return False
