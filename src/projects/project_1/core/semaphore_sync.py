import threading
import logging


class SemaphoreSyncManager:  


    def __init__(self, seed, monitor, perf_monitor):
            """
            Initialise le gestionnaire de synchronisation basÃ© sur les sÃ©maphores.

            Args:
                seed: Instance de STSSeed contenant les ressources.
                monitor: Moniteur de synchronisation (non utilisÃ© dans cette version).
                perf_monitor: Moniteur de performance (non utilisÃ© dans cette version).
            """
            self.seed = seed
            self.monitor = monitor
            self.perf_monitor = perf_monitor

            # 1.1. SÃ©maphores pour les capacitÃ©s des bus
            self.bus_semaphores = {}

            # 1.2. SÃ©maphores pour les arrÃªts (limiter le nombre de bus simultanÃ©s)
            self.stop_semaphores = {}

            # 1.3. Files d'attente des passagers par arrÃªt
            self.stop_queues = {}

            # 1.4. Verrous pour protÃ©ger l'accÃ¨s aux files d'attente
            self.queue_locks = {}

    def initialize(self) -> bool:
        """
        Initialise les sÃ©maphores pour les bus et les arrÃªts.

        Returns:
            bool: True si l'initialisation a rÃ©ussi, False sinon.
        """
        logging.info(" Initialisation des sÃ©maphores pour les bus et les arrÃªts.")

        try:
            # 2.1. Initialisation des sÃ©maphores pour les capacitÃ©s des bus
            for bus_id, bus in self.seed.buses.items():
                self.bus_semaphores[bus_id] = threading.Semaphore(bus.capacity)  # CapacitÃ© du bus
                logging.info(f" Bus {bus_id} : CapacitÃ© {bus.capacity} initialisÃ©e avec un sÃ©maphore.")

            # 2.2. Initialisation des sÃ©maphores pour les arrÃªts (limitÃ© Ã  2 bus max)
            for stop_id in self.seed.stops.keys():
                self.stop_semaphores[stop_id] = threading.Semaphore(2)  # Limite de 2 bus en mÃªme temps
                logging.info(f"ArrÃªt {stop_id} : SÃ©maphore de capacitÃ© 2 initialisÃ©.")

            logging.info(" Initialisation des sÃ©maphores terminÃ©e.")
            return True

        except Exception as e:
            logging.error(f" Erreur pendant l'initialisation des sÃ©maphores : {e}")
            return False

            
    def board_passenger(self, bus_id, passenger_id, timeout=2.0) -> bool:
        """
        Fait monter un passager dans un bus si la capacitÃ© le permet.

        Args:
            bus_id (int): Identifiant du bus.
            passenger_id (int): Identifiant du passager.
            timeout (float): DÃ©lai d'attente maximum en secondes.

        Returns:
            bool: True si le passager a pu monter, False sinon.
        """
        if bus_id not in self.bus_semaphores:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        bus_semaphore = self.bus_semaphores[bus_id]

        # 3.1. Acquisition du sÃ©maphore avec timeout
        acquired = bus_semaphore.acquire(timeout=timeout)
        
        if not acquired:
            logging.info(f"Passager {passenger_id} n'a pas pu monter, bus {bus_id} plein.")
            return False  # Le passager ne peut pas monter

        # 3.2. Mise Ã  jour de l'Ã©tat du passager et du bus
        self.passenger_in_bus[passenger_id] = bus_id  # Associer le passager au bus
        logging.info(f"Passager {passenger_id} monte dans le bus {bus_id}.")
        
        return True


    def alight_passenger(self, bus_id, passenger_id) -> bool:
        """
        Fait descendre un passager d'un bus.

        Args:
            bus_id (int): Identifiant du bus.
            passenger_id (int): Identifiant du passager.

        Returns:
            bool: True si le passager a pu descendre, False sinon.
        """
        if bus_id not in self.bus_semaphores:
            logging.warning(f"Bus {bus_id} introuvable.")
            return False

        if passenger_id not in self.passenger_in_bus:
            logging.warning(f"Passager {passenger_id} introuvable dans un bus.")
            return False

        if self.passenger_in_bus[passenger_id] != bus_id:
            logging.warning(f"Passager {passenger_id} n'est pas dans le bus {bus_id}.")
            return False

        bus_semaphore = self.bus_semaphores[bus_id]

        try:
            # 3.3. VÃ©rification que le passager est bien dans ce bus
            del self.passenger_in_bus[passenger_id]  # Retirer le passager du bus

            # 3.4. Mise Ã  jour du sÃ©maphore (libÃ©rer une place)
            bus_semaphore.release()
            logging.info(f"Passager {passenger_id} descend du bus {bus_id}.")
            return True
        except ValueError:
            logging.error(f"Erreur : tentative de libÃ©ration en trop pour le bus {bus_id}.")
            return False


    def bus_arrive_at_stop(self, bus_id, stop_id, timeout=5.0) -> bool:
        """
        GÃ¨re l'arrivÃ©e d'un bus Ã  un arrÃªt.

        Args:
            bus_id (int): Identifiant du bus.
            stop_id (int): Identifiant de l'arrÃªt.
            timeout (float): DÃ©lai d'attente maximum en secondes.

        Returns:
            bool: True si le bus a pu accÃ©der Ã  l'arrÃªt, False sinon.
        """
        if stop_id not in self.stop_semaphores:
            logging.warning(f"ArrÃªt {stop_id} introuvable.")
            return False

        stop_semaphore = self.stop_semaphores[stop_id]
        queue_lock = self.queue_locks[stop_id]
        stop_queue = self.stop_queues[stop_id]

        with queue_lock:
            stop_queue.append(bus_id)  # 4.1. Ajouter le bus Ã  la file d'attente
            logging.info(f"Bus {bus_id} ajoutÃ© Ã  la file d'attente de l'arrÃªt {stop_id}.")

        start_time = time.time()

        while True:
            with queue_lock:
                # 4.2. Attente active : VÃ©rifie si le bus est en tÃªte de la file
                if stop_queue[0] == bus_id:
                    break

            if time.time() - start_time > timeout:
                with queue_lock:
                    stop_queue.remove(bus_id)
                logging.warning(f"Bus {bus_id} a dÃ©passÃ© le dÃ©lai d'attente et quitte la file.")
                return False

            time.sleep(0.1)  # Ã‰vite une boucle trop rapide

        # 4.3. Tente d'acquÃ©rir une place Ã  l'arrÃªt
        if not stop_semaphore.acquire(timeout=timeout):
            with queue_lock:
                stop_queue.remove(bus_id)
            logging.warning(f"Bus {bus_id} n'a pas pu accÃ©der Ã  l'arrÃªt {stop_id}, arrÃªt plein.")
            return False

        with queue_lock:
            stop_queue.remove(bus_id)  # 4.3. Retirer le bus de la file d'attente

        # 4.4. Mise Ã  jour de l'Ã©tat du bus et de l'arrÃªt
        self.bus_at_stop[bus_id] = stop_id  # Associe le bus Ã  l'arrÃªt
        self.stops_with_buses[stop_id].append(bus_id)  # 4.6. Ajout du bus Ã  la liste des bus de l'arrÃªt

        logging.info(f"Bus {bus_id} est arrivÃ© Ã  l'arrÃªt {stop_id}.")
        return True

    def bus_depart_from_stop(self, bus_id, stop_id) -> bool:
        """
        GÃ¨re le dÃ©part d'un bus d'un arrÃªt.

        Args:
            bus_id (int): Identifiant du bus.
            stop_id (int): Identifiant de l'arrÃªt.

        Returns:
            bool: True si le bus a pu quitter l'arrÃªt, False sinon.
        """
        if stop_id not in self.stop_semaphores:
            logging.warning(f"ArrÃªt {stop_id} introuvable.")
            return False

        if bus_id not in self.bus_at_stop:
            logging.warning(f"Bus {bus_id} n'est pas enregistrÃ© Ã  un arrÃªt.")
            return False

        if self.bus_at_stop[bus_id] != stop_id:
            logging.warning(f"Bus {bus_id} n'est pas actuellement Ã  l'arrÃªt {stop_id}.")
            return False

        stop_semaphore = self.stop_semaphores[stop_id]
        
        try:
            stop_semaphore.release()  # 4.8. LibÃ¨re une place Ã  l'arrÃªt
            del self.bus_at_stop[bus_id]  # Supprime l'association bus/arrÃªt

            with self.queue_locks[stop_id]:
                self.stops_with_buses[stop_id].remove(bus_id)  # 4.9. Retrait du bus de l'arrÃªt

            logging.info(f"Bus {bus_id} a quittÃ© l'arrÃªt {stop_id}.")
            return True
        except ValueError:
            logging.error(f"Erreur : tentative de libÃ©ration en trop pour l'arrÃªt {stop_id}.")
            return False


    def run_scenarios(self, duration):
        """
        ExÃ©cute les scÃ©narios de test.

        Args:
            duration (int): DurÃ©e d'exÃ©cution des scÃ©narios en secondes.
        """
        logging.info("DÃ©marrage des scÃ©narios de test.")

        # 5.1. CrÃ©ation des threads pour les bus et passagers
        threads = []

        for bus_id in self.seed.buses.keys():
            thread = threading.Thread(target=self.simulate_bus, args=(bus_id,))
            threads.append(thread)

        for passenger_id in self.seed.passengers.keys():
            thread = threading.Thread(target=self.simulate_passenger, args=(passenger_id,))
            threads.append(thread)

        # 5.2. DÃ©marrage des threads
        for thread in threads:
            thread.start()

        # 5.3. Attente de la fin des threads
        start_time = time.time()
        while time.time() - start_time < duration:
            time.sleep(1)  # Pause pour Ã©viter de monopoliser le CPU

        # ArrÃªt de la simulation
        self.stop_event.set()

        for thread in threads:
            thread.join()  # Attente que tous les threads terminent leur exÃ©cution

        logging.info("Simulation terminÃ©e.")


    def cleanup(self):
        """
        Nettoie les ressources utilisÃ©es par SemaphoreSyncManager.

        Returns:
            bool: True si le nettoyage rÃ©ussit, False sinon.
        """
        try:
            logging.info("ğŸ§¹ Nettoyage des ressources.")
            self.bus_semaphores.clear()
            self.stop_semaphores.clear()
            self.stop_queues.clear()
            self.queue_locks.clear()
            self.bus_at_stop.clear()
            self.stops_with_buses.clear()
            logging.info(" Nettoyage terminÃ©.")
            return True
        except Exception as e:
            logging.error(f" Erreur lors du nettoyage : {e}")
            return False
